<krpano>

	<!-- krpano 1.19.pr3 - Virtual Tour Skin -->
	
    <!--VR按钮设置-->
	<layer name="ui_skin_vr" devices="html5" style="skin_base|skin_glow" crop="0|0|80|64"    align.normal="leftbottom" align.mobile="bottom" x.normal="60" x.mobile="20" y.normal="20" y.mobile="5"  keep="true" alpha="1"   zorder="90" scale="0.5" onclick="webvr.enterVR();" />
	
	<!--缩略图按钮设置-->
	<action name="flagthumbs">
	if(layer[skin_thumbs].state == 'opened', 
	skin_showthumbs();
	set(layer[skin_thumbs].state, 'closed');,
	closethumbs();
	set(layer[skin_thumbs].state, 'opened');
	);
	</action>
	
	<action name="flagthumbs" devices="mobile">
	if(layer[skin_thumbs].state == 'opened', 
	skin_showthumbs();
	set(layer[skin_thumbs].state, 'closed');,
	closethumbs();
	set(layer[skin_thumbs].state, 'opened');
	);
	</action>

	<layer name="ui_skin_showthumbs" style="skin_base|skin_glow" crop="0|128|64|64" align="leftbottom" x.normal="20" x.mobile="5" y.normal="20" y.mobile="5" keep="true" alpha="1" group="c1" zorder="2" scale="0.5" onclick="flagthumbs();"/>
	
	<!--缩略图按钮设置（'opened' => 'closed'）-->
    <action name="closethumbs">
   if(layer[skin_thumbs].state == 'closed', 
   tween(layer[skin_scroll_layer].y,-170););
   </action>

   <action name="closethumbs" devices="mobile" >
   if(layer[skin_thumbs].state == 'closed', 
   tween(layer[skin_scroll_layer].y,-130););
   </action>
	<!--缩略图按钮设置-->
	
	
    <!--地图按钮设置-->
	<!--<layer name="ui_skin_map" style="skin_base|skin_glow" crop="64|128|64|64" align.normal="leftbottom" align.mobile="rightbottom" x.normal="60" x.mobile="20"  y.normal="20" y.mobile="5" keep="true" alpha="1" zorder="0" scale="0.5" onclick="openmap();" />-->
	
 <!--旋转按钮-->
	<layer name="skin_btn_xz" style="skin_base1|skin_glow" crop="150|0|38|38" align="leftbottom" x.normal="100" x.mobile="-95"  y.normal="18" y.mobile="5" keep="true" scale="1" zorder="2" alpha="1.0" onup2="set(fov_moveforce,0);" ondown2="set(visible,galse);switch(layer[skin_btn_zt].visible); if(autorotate.enabled,set(layer[skin_btn_autorate].crop,'0|1216|64|64');set(autorotate.enabled,false);openall(),set(la [skin_btn_autorate].crop,'64|1216|64|64');set(autorotate.enabled,true);bombtimer(0));set(autorotate.speed,'2.0');"/>
	
	<!--暂停按钮-->
	<layer name="skin_btn_zt" style="skin_base1|skin_glow" crop="190|0|38|38" align="leftbottom" x.normal="102" x.mobile="-95"  y.normal="18" y.mobile="5" keep="true" scale="1" zorder="2" alpha="1.0" visible="false" onup2="set(fov_moveforce,0);" ondown2="set(visible,galse);switch(layer[skin_btn_xz].visible); if(autorotate.enabled,set(layer[skin_btn_autorate].crop,'0|1216|64|64');set(autorotate.enabled,false);stopall(),set(la [skin_btn_autorate].crop,'64|1216|64|64');set(autorotate.enabled,false);bombtimer(0));"/>

	<layer name="skin_btn_snd" url="music-player.png" crop="0|0|55|55" align="leftbottom" x.normal="140" x.mobile="15" y.normal="22" y.mobile="5"
		    keep="true" alpha="1" scale="0.5"	   
	        onclick="pausesoundtoggle(bggsnd123); switch(crop, 0|0|55|55, 0|55|55|55);" /> 


<!--音乐插件 -->
<plugin name="soundinterface" url="%SWFPATH%/plugins/soundinterface.swf" alturl="%SWFPATH%/plugins/soundinterface.js" rootpath="" preload="true" keep="true" volume="1.0"/>
<!--音乐插件-->


	
	<!-- 场景过渡效果 -->
	<blendmodes name="no blending"          blend="NOBLEND" />
	<blendmodes name="simple crossblending" blend="BLEND(1.0, easeInCubic)" />
	<blendmodes name="zoom blend"           blend="ZOOMBLEND(2.0, 2.0, easeInOutSine)" />
	<blendmodes name="black-out"            blend="COLORBLEND(2.0, 0x000000, easeOutSine)" />
	<blendmodes name="white-flash"          blend="LIGHTBLEND(1.0, 0xFFFFFF, 2.0, linear)" />
	<blendmodes name="right-to-left"        blend="SLIDEBLEND(1.0, 0.0, 0.2, linear)" />
	<blendmodes name="top-to-bottom"        blend="SLIDEBLEND(1.0, 90.0, 0.01, linear)" />
	<blendmodes name="diagonal"             blend="SLIDEBLEND(1.0, 135.0, 0.4, linear)" />
	<blendmodes name="circle open"          blend="OPENBLEND(1.0, 0.0, 0.2, 0.0, linear)" />
	<blendmodes name="vertical open"        blend="OPENBLEND(0.7, 1.0, 0.1, 0.0, linear)" />
	<blendmodes name="horizontal open"      blend="OPENBLEND(1.0, -1.0, 0.3, 0.0, linear)" />
	<blendmodes name="elliptic + zoom"      blend="OPENBLEND(1.0, -0.5, 0.3, 0.8, linear)" />

	<action name="add_blendmodes" autorun="onstart">
		for(set(i,0), i LT blendmodes.count, inc(i),
			set(ln, calc('bd_blend_'+i));
			addlayer(get(ln));
			copy(lr, layer[get(ln)]);
			set(lr.parent, bd_scroller);
			set(lr.keep, true);
			lr.loadstyle(button);
			copy(lr.html, blendmodes[get(i)].name);
			copy(lr.blend, blendmodes[get(i)].blend);
			set(lr.align, top);
			set(lr.onclick, 'do_blending(get(blend))');
			set(lr.y, calc(8+i*30));
		  );
		set(layer[bg_scroller].height, calc((blendmodes.count)*30+8));
	</action>
		
	<action name="do_blending">
		<!-- save current blending settings -->
		push(skin_settings.loadscene_blend_prev);
		push(skin_settings.loadscene_blend_next);
		
		<!-- overwrite the skin blending settings -->
		set(skin_settings.loadscene_blend_prev, %1);
		set(skin_settings.loadscene_blend_next, %1);
		
		<!-- load the next pano in the tour -->
		skin_nextscene_loop(+1);
		
		<!-- restore the saved blending settings -->
		pop(skin_settings.loadscene_blend_next);
		pop(skin_settings.loadscene_blend_prev);
	</action>
    <!-- 场景过渡效果 -->

	
	<!-- save the url path of this xml file (the url value will be adjusted during xml parsing) -->
	<vtourskinxmlpath url="./" />


	<!-- mouse / keyboard(button) control settings - http://krpano.com/docu/xml/#control.advanced -->
	<control mousetype="moveto"
	         zoomtocursor="false"
	         zoomoutcursor="false"
	         mouseaccelerate="1.0"
	         mousespeed="10.0"
	         mousefriction="0.8"
	         mousefovchange="1.0"
	         keybaccelerate="0.09"
	         keybfriction="0.94"
	         keybfovchange="0.25"
	         fovspeed="3.0"
	         fovfriction="0.9"
	         bouncinglimits="true"
	         touchfriction="0.9"
	         />

	<!-- mouse cursors -->
	<cursors standard="default"
	         dragging="move"
	         moving="move"
	         />


	<!-- ensure stagescale 2x for mobile devices (regardless if mobilescale is 0.5 or 1.0) -->
	<krpano stagescale="calc:stagescale*(1.0 + 1.0*(stagescale LT 1.0))" devices="mobile" />


	<!-- include VR support -->
	<include url="../plugins/webvr.xml" devices="html5" />

	<!-- overwrite some settings from the webvr.xml for the skin integration -->
	<plugin name="WebVR" keep="true" devices="html5"
	        multireslock.desktop="true"
	        multireslock.mobile.or.tablet="false"
	        mobilevr_fake_support="true"
	        onavailable="removelayer(webvr_enterbutton); skin_arrange_buttons(); webvr_onavailable();"
	        onentervr="skin_showloading(false); webvr_onentervr(); webvr_setup();"
	        onexitvr="webvr_onexitvr(); webvr_setup();"
	        />

	<!-- webvr button style (adjust to match default skin style) -->
	<style name="webvr_button_style"
	       border="false"
	       shadow="0.01" shadowrange="9.0" shadowcolor="0xFFFFFF" shadowalpha="0.5"
	       />

	<!-- show a 'rotate the device' info when the mobile device is in portrait mode in VR mode -->
	<layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile"
	       url="rotate_device.png" scale="0.5"
	       align="top" edge="center" y="28%"
	       autoalpha="true" alpha="0.0"
	       enabled="false"
	       />

	<events name="webvr_events" keep="true" devices="html5"
	        onresize.mobile="webvr_act_as_gyro_in_portrait_mode();"
	        onviewchange=""
	        />

	

	<action name="webvr_act_as_gyro_in_portrait_mode">
		if(device.mobile AND webvr.isenabled,
			div(aspect, stagewidth, stageheight);
			if(aspect != lastaspect OR '%1' == 'true',
				copy(lastaspect, aspect);
				if(stagewidth GT stageheight,
					<!-- landscape mode - use stereo rendering and a direct/fast gyro sensor mode -->
					set(display.stereo, true);
					set(webvr.mobilevr_sensor_mode, 3);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
				  ,
					<!-- portrait mode - use normal rendering and a smoother/slower gyro sensor mode -->
					set(display.stereo, false);
					set(webvr.mobilevr_sensor_mode, 1);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);
					delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); );
				  );
			  );
		  ,
			set(lastaspect, 0);
		  );
	</action>

	<!-- VR scene switching hotspots -->
	<!--<style name="webvr_menu_style" depth="800" scale="0.5" distorted="true" ath="0" atv="45" alpha="0.5" />
	<hotspot name="webvr_prev_scene" keep="true" style="skin_base|webvr_menu_style" crop="0|64|64|64"  ox="-64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(-1);" visible="false" devices="html5.and.webgl" />
	<hotspot name="webvr_next_scene" keep="true" style="skin_base|webvr_menu_style" crop="64|64|64|64" ox="+64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(+1);" visible="false" devices="html5.and.webgl" />-->

	<!-- floating/following VR hotspots -->
	<action name="webvr_menu_following" type="Javascript" devices="html5"><![CDATA[
		var hs1 = krpano.get("hotspot[webvr_prev_scene]");
		var hs2 = krpano.get("hotspot[webvr_next_scene]");
		if(!hs1.hovering && !hs2.hovering)
		{
			var f = 0.01;	// follow speed factor
			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;
			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;
			var dh = h - hsh;
			dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0
			hsh += dh*f;
			var a = Math.abs(v - hsv) / 90.0;
			a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);
			v = v + 55.0 - v*1.5;
			hsv = hsv*(1.0 - f) + v*f;
			hs1.ath = hs2.ath = hsh;
			hs1.atv = hs2.atv = hsv;
			hs1.alpha = hs2.alpha = a;
		}
	]]></action>
	<!-- VR support -->



	<!-- skin styles -->

	<!-- 引入按钮样式-->
	<style name="skin_base" url="calc:vtourskinxmlpath.url + skin_settings.design_skin_images" />
	<style name="skin_base1" url="icon-light.png" />


	<!-- skin_glow - button glowing (if additional ondown,onup,onout,over events are needed, this style provides ondown2,onup2,onover2,onout2 events) -->
	<style name="skin_glow"
	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); if(onover2, onover2() );"
	       onout="if(skin_lockglow === name AND !pressed, skin_buttonglow(null);delete(skin_lockglow); ); if(onout2, onout2() );"
	       onup="if(onup2, onup2()); delayedcall(0, if(hovering AND enabled, skin_buttonglow(get(name),0.3); , skin_buttonglow(null);delete(skin_lockglow); ); );"
	       />

	<!-- 缩略图文字样式修改 font-size:10px 修改数值大小即可改动文字大小 -->
	<style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="-2" enabled="false" background="false" border="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:15px;'" textshadow="get:skin_settings.design_text_shadow" />

	<!-- 默认热点样式 -->
	<style name="skin_hotspotstyle" 
		   url="vtourskin_hotspot.png" 
		   scale.normal="0.5" scale.mobile="0.2" 
		   edge="top" distorted="false"
	       
	       onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"
	       onover="tween(scale,0.55);"
	       onout="tween(scale,0.5);"
	       onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       />
           <!--如需箭头上方显示名称，做以下改动：onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip(get(linkedscene),1));"-->


	<!-- 动态热点-黑色 -->
	<style name="skin_hotspotstyle_1"
	       url="up.png"
	       crop="0|0|128|128"
	       framewidth="128" frameheight="128" frame="0" lastframe="24" scale.normal="0.5" scale.mobile="0.3"
	       onloaded="if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip3(get(linkedscene),1));
	       skin_hotspotstyle_animate();if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"
	       />

	<!-- 动态热点-白色 -->
	<style name="skin_hotspotstyle_2"
	       url="down.png"
	       crop="0|0|128|128"
	       framewidth="128" frameheight="128" frame="0" lastframe="24" scale.normal="0.5" scale.mobile="0.3"
	       onloaded="if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip2(get(linkedscene),1));
	       skin_hotspotstyle_animate();if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"
	       />
		   
	<!-- 动态热点-箭头 -->
	<style name="skin_hotspotstyle_4"
	       url="hotspot.png"
	       crop="0|0|50|50"
	       framewidth="100" frameheight="80" frame="0" lastframe="11" scale.normal="1" scale.mobile="0.5"
	       onloaded="if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip1(get(linkedscene),1));
	       skin_hotspotstyle_animate();if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"
	       />

<style name="skin_hotspotstyle_5"
	       url="move1_gif.png"
	       crop="0|0|80|80" scale="0.7"
	       framewidth="80" frameheight="80" frame="0" lastframe="26"
	       onloaded="skin_hotspotstyle_animate();if(skin_settings.tooltips_hotspots, if(linkedscene, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); ));"
	       onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
	       />

	<action name="skin_hotspotstyle_animate">
		    inc(frame,1,get(lastframe),0);
		    mul(ypos,frame,frameheight);
		    txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
		    delayedcall(0.05, if(loaded, skin_hotspotstyle_animate() ) );
	</action>

	<!--箭头上方文字框属性-->
    <action name="add_all_the_time_tooltip1">
    txtadd(tooltipname, 'tooltip_', get(name));
    addplugin(get(tooltipname));
    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    set(plugin[get(tooltipname)].align,top);
    set(plugin[get(tooltipname)].edge,bottom);
    set(plugin[get(tooltipname)].x,0);
    set(plugin[get(tooltipname)].y,15);
    set(plugin[get(tooltipname)].autoweight,true);
    set(plugin[get(tooltipname)].autoheight,true);
    set(plugin[get(tooltipname)].background,true);
	set(plugin[get(tooltipname)].backgroundcolor,0x000000);
	set(plugin[get(tooltipname)].roundedge,3);
	set(plugin[get(tooltipname)].backgroundalpha,0.6);
    set(plugin[get(tooltipname)].border,true);
	set(plugin[get(tooltipname)].glow,4);
	set(plugin[get(tooltipname)].glowcolor,0xF6B017);
    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;');
    set(plugin[get(tooltipname)].textshadow,1);
    set(plugin[get(tooltipname)].textshadowrange,6.0);
    set(plugin[get(tooltipname)].textshadowangle,90);
    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
    set(plugin[get(tooltipname)].enabled,false);
    </action>

    <action name="add_all_the_time_tooltip1" devices="mobile">
    txtadd(tooltipname, 'tooltip_', get(name));
    addplugin(get(tooltipname));
    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    set(plugin[get(tooltipname)].align,top);
    set(plugin[get(tooltipname)].edge,bottom);
    set(plugin[get(tooltipname)].x,0);
    set(plugin[get(tooltipname)].y,15);
    set(plugin[get(tooltipname)].autoweight,true);
    set(plugin[get(tooltipname)].autoheight,true);
    set(plugin[get(tooltipname)].background,true);
	set(plugin[get(tooltipname)].backgroundcolor,0x000000);
	set(plugin[get(tooltipname)].roundedge,3);
	set(plugin[get(tooltipname)].backgroundalpha,0.6);
    set(plugin[get(tooltipname)].border,true);
	set(plugin[get(tooltipname)].glow,4);
	set(plugin[get(tooltipname)].glowcolor,0xF6B017);
    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;');
    set(plugin[get(tooltipname)].textshadow,1);
    set(plugin[get(tooltipname)].textshadowrange,6.0);
    set(plugin[get(tooltipname)].textshadowangle,90);
    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
    set(plugin[get(tooltipname)].enabled,false);
    </action>
	

<action name="add_all_the_time_tooltip2">
    txtadd(tooltipname, 'tooltip_', get(name));
    addplugin(get(tooltipname));
    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    set(plugin[get(tooltipname)].align,top);
    set(plugin[get(tooltipname)].edge,bottom);
    set(plugin[get(tooltipname)].x,0);
    set(plugin[get(tooltipname)].y,90);
    set(plugin[get(tooltipname)].autoweight,true);
    set(plugin[get(tooltipname)].autoheight,true);
    set(plugin[get(tooltipname)].background,true);
	set(plugin[get(tooltipname)].backgroundcolor,0x000000);
	set(plugin[get(tooltipname)].roundedge,3);
	set(plugin[get(tooltipname)].backgroundalpha,0.6);
    set(plugin[get(tooltipname)].border,true);
	set(plugin[get(tooltipname)].glow,4);
	set(plugin[get(tooltipname)].glowcolor,0xF6B017);
    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;');
    set(plugin[get(tooltipname)].textshadow,1);
    set(plugin[get(tooltipname)].textshadowrange,6.0);
    set(plugin[get(tooltipname)].textshadowangle,90);
    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
    set(plugin[get(tooltipname)].enabled,false);
</action>

    <action name="add_all_the_time_tooltip2" devices="mobile">
    txtadd(tooltipname, 'tooltip_', get(name));
    addplugin(get(tooltipname));
    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    set(plugin[get(tooltipname)].align,top);
    set(plugin[get(tooltipname)].edge,bottom);
    set(plugin[get(tooltipname)].x,0);
    set(plugin[get(tooltipname)].y,60);
    set(plugin[get(tooltipname)].autoweight,true);
    set(plugin[get(tooltipname)].autoheight,true);
    set(plugin[get(tooltipname)].background,true);
	set(plugin[get(tooltipname)].backgroundcolor,0x000000);
	set(plugin[get(tooltipname)].roundedge,3);
	set(plugin[get(tooltipname)].backgroundalpha,0.6);
    set(plugin[get(tooltipname)].border,true);
	set(plugin[get(tooltipname)].glow,4);
	set(plugin[get(tooltipname)].glowcolor,0xF6B017);
    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;');
    set(plugin[get(tooltipname)].textshadow,1);
    set(plugin[get(tooltipname)].textshadowrange,6.0);
    set(plugin[get(tooltipname)].textshadowangle,90);
    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
    set(plugin[get(tooltipname)].enabled,false);
    </action>
	
	<action name="add_all_the_time_tooltip3" devices="normal"
 >
    txtadd(tooltipname, 'tooltip_', get(name));
    addplugin(get(tooltipname));
    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    set(plugin[get(tooltipname)].align,top);
    set(plugin[get(tooltipname)].edge,bottom);
    set(plugin[get(tooltipname)].x,0);
    set(plugin[get(tooltipname)].y,0);
    set(plugin[get(tooltipname)].autoweight,true);
    set(plugin[get(tooltipname)].autoheight,true);
    set(plugin[get(tooltipname)].background,true);
	set(plugin[get(tooltipname)].backgroundcolor,0x000000);
	set(plugin[get(tooltipname)].roundedge,3);
	set(plugin[get(tooltipname)].backgroundalpha,0.6);
    set(plugin[get(tooltipname)].border,true);
	set(plugin[get(tooltipname)].glow,4);
	set(plugin[get(tooltipname)].glowcolor,0xF6B017);
    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;');
    set(plugin[get(tooltipname)].textshadow,1);
    set(plugin[get(tooltipname)].textshadowrange,6.0);
    set(plugin[get(tooltipname)].textshadowangle,90);
    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
    set(plugin[get(tooltipname)].enabled,false);
    </action>

    <action name="add_all_the_time_tooltip3" devices="mobile">
    txtadd(tooltipname, 'tooltip_', get(name));
    addplugin(get(tooltipname));
    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    set(plugin[get(tooltipname)].align,top);
    set(plugin[get(tooltipname)].edge,bottom);
    set(plugin[get(tooltipname)].x,0);
    set(plugin[get(tooltipname)].y,30);
    set(plugin[get(tooltipname)].autoweight,true);
    set(plugin[get(tooltipname)].autoheight,true);
    set(plugin[get(tooltipname)].background,true);
	set(plugin[get(tooltipname)].backgroundcolor,0x000000);
	set(plugin[get(tooltipname)].roundedge,3);
	set(plugin[get(tooltipname)].backgroundalpha,0.6);
    set(plugin[get(tooltipname)].border,true);
	set(plugin[get(tooltipname)].glow,4);
	set(plugin[get(tooltipname)].glowcolor,0xF6B017);
    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;');
    set(plugin[get(tooltipname)].textshadow,1);
    set(plugin[get(tooltipname)].textshadowrange,6.0);
    set(plugin[get(tooltipname)].textshadowangle,90);
    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
    set(plugin[get(tooltipname)].enabled,false);
    </action>
	
	
	

    <!--以下不做改动-->

	<!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
	<style name="skin_tooltips"
	       onover.mouse="copy(layer[skin_tooltip].html, tooltip);
	                     set(layer[skin_tooltip].visible, true);
	                     tween(layer[skin_tooltip].alpha, 1.0, 0.1);
	                     asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       onout.mouse="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       />


	<!-- the tooltip textfield -->
	<layer name="skin_tooltip" keep="true"
	       url="%SWFPATH%/plugins/textfield.swf"
	       parent="STAGE"
	       visible="false" alpha="0" enabled="false"
	       align="lefttop" edge="bottom" oy="-2" width="200" autoheight="true"
	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
	       border="false" bordercolor="0x000000" borderalpha="1.0" borderwidth="1.0" roundedge="0"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="get:skin_settings.design_text_shadow" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px;'"
	       html=""
	       />



	<!-- skin layout -->
	<layer name="skin_layer" keep="true" type="container" altscale="1" align="center" width="100%"  height="100%" maskchildren="true" visible="false">
		<layer name="skin_scroll_layer" type="container" align="leftbottom" width="100%" height.normal="100" height.mobile="70" x="0" y.normal="-170" y.mobile="-130" y_offset="0" accuracy="1" bgcolor="0x000000" bgalpha="0.5" >
			<layer name="skin_title" url="%SWFPATH%/plugins/textfield.swf" alpha="0" align="center" edge="leftbottom" width="95%" height="32" autoheight="true" x.normal="5" x.mobile="2" y.normal="-2" y.mobile="0" zorder="4" enabled="false" background="false" border="false" css="calc:skin_settings.design_text_css + ' text-align:left; font-size:' + (device.mobile ? 12 : 16) + 'px;'" textshadow="get:skin_settings.design_text_shadow" visible="false" />

			<!--<layer name="skin_title1" url="%SWFPATH%/plugins/textfield.swf" width="60" height="23" align="leftbottom" x="660" y="30" scale="1.0" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" 
            onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
            onout="tween(bgcolor,0x000000);tween(bgalpha,1);"
			css="text-align:center; color:#000000; font-family:Arial; font-weight:bold; font-size:12px;"
			html="自助借还"
			onclick="skin_showthumbs();"/> -->


			<layer name="sidebar" keep="true" type="container" align="lefttop" edge="leftbottom" width="100%" height="30" bgcolor="0x00FFFF" bgalpha="0">
            
            <layer name="scrollarea" url="%SWFPATH%/plugins/scrollarea.swf" alturl="%SWFPATH%/plugins/scrollarea.js" align="left" x="2" width="600" height="100%" direction="h">


            <layer name="yilou"  type="container" width="60" height="25" align="leftbottom" x="0" y="2" x.mobile="0" scale.normal="1" scale.mobile="0.7" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" scalechildren="true"
             onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
             onout="tween(bgcolor,0x000000);tween(bgalpha,1);" >
                <layer name="floor3" url="0.png" align="center" x="0" y="0"  group="c1"  onclick="skin_showthumbs();loadscene(scene_1l-1, null, MERGE, get(blendmodes[simple crossblending].blend));"/>
            </layer>
			
            <layer name="erlou"  type="container" width="60" height="25" align="leftbottom" x="62" y="2" x.mobile="5" scale.normal="1" scale.mobile="0.7" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" scalechildren="true"
             onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
             onout="tween(bgcolor,0x000000);tween(bgalpha,1);" >
                <layer name="area5" url="1.png" align="center" x="0" y="0"  group="c2"  onclick="skin_showthumbs();loadscene(scene_2L-1, null, MERGE, get(blendmodes[simple crossblending].blend));"/>
            </layer>
			
            <layer name="sanlou"  type="container" width="60" height="25" align="leftbottom" x="124" y="2" x.mobile="10" scale.normal="1" scale.mobile="0.7" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" scalechildren="true"
             onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
             onout="tween(bgcolor,0x000000);tween(bgalpha,1);" >
                <layer name="ereading" url="2.png" align="center" x="0" y="0"  group="c3"  onclick="skin_showthumbs();loadscene(scene_3l-1, null, MERGE, get(blendmodes[simple crossblending].blend));"/>
            </layer> 
			
            <!--<layer name="silou"  type="container" width="60" height="25" align="leftbottom" x="186" y="2" x.mobile="15" scale.normal="1" scale.mobile="0.7" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" scalechildren="true"
             onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
             onout="tween(bgcolor,0x000000);tween(bgalpha,1);" >
                <layer name="area6" url="3.png" align="center" x="0" y="0"  group="c4"  onclick="skin_showthumbs();loadscene(scene_4l-1, null, MERGE, get(blendmodes[simple crossblending].blend));"/>
            </layer>
			
			<layer name="wulou"  type="container" width="60" height="25" align="leftbottom" x="248" y="2" x.mobile="20" scale.normal="1" scale.mobile="0.7" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" scalechildren="true"
             onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
             onout="tween(bgcolor,0x000000);tween(bgalpha,1);" >
                <layer name="louchen" url="4.png" align="center" x="0" y="0"  group="c5"  onclick="skin_showthumbs();loadscene(scene_5l-1, null, MERGE, get(blendmodes[simple crossblending].blend));"/>
            </layer>
			
			<!--<layer name="liulou"  type="container" width="60" height="25" align="leftbottom" x="310" y="2" x.mobile="25" scale.normal="1" scale.mobile="0.7" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" scalechildren="true"
             onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
             onout="tween(bgcolor,0x000000);tween(bgalpha,1);" >
                <layer name="area7" url="5.png" align="center" x="0" y="0"  group="c6"  onclick="skin_showthumbs();loadscene(scene_6l-1, null, MERGE, get(blendmodes[simple crossblending].blend));"/>
            </layer>
			
			<layer name="qilou"  type="container" width="60" height="25" align="leftbottom" x="372" y="2" x.mobile="25" scale.normal="1" scale.mobile="0.7" zorder="2" alpha="0.7" visible="true" bgcolor="0x000000" bgalpha="1" scalechildren="true"
             onhover="tween(bgcolor,0x5980ff);tween(bgalpha,1);" 
             onout="tween(bgcolor,0x000000);tween(bgalpha,1);" >
                <layer name="area9" url="6.png" align="center" x="0" y="0"  group="c7"  onclick="skin_showthumbs();loadscene(scene_9l-1, null, MERGE, get(blendmodes[simple crossblending].blend));"/>
            </layer>-->
			
           <layer name="skin_close"  type="container" width="60" height="25" align="leftbottom" x="186" y="2" x.mobile="15" scale.normal="1" scale.mobile="0.7" zorder="2"  visible="true" bgcolor="0xF6B017" bgalpha="1" scalechildren="true"
             onhover="tween(bgalpha,1);" 
             onout="tween(bgalpha,1);" >
                <layer name="close2" url="close2.png" align="center" x="0" y="0"  onclick="closethumbs();"/>
            </layer>
            </layer>
            </layer>

            			
			<layer name="skin_thumbs_container" type="container" align="lefttop" width="100%" height="100%" visible="false">	

				<layer name="skin_thumbs" state="closed" url.flash="%SWFPATH%/plugins/scrollarea.swf" url.html5="%SWFPATH%/plugins/scrollarea.js" direction="h" align="center" width="100%" height="100%" zorder="1" onloaded="skin_updatescroll();" onscroll="skin_updatethumbscroll();" />
			</layer>	
			
		</layer>


		<layer name="skin_loadingtext" url="%SWFPATH%/plugins/textfield.swf" align="center" x="5" y="-5" html="get:skin_settings.loadingtext" visible="false" autoheight="true" background="false" border="false" enabled="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-style:italic; font-size:22px;'" textshadow="get:skin_settings.design_text_shadow" />
		<layer name="skin_buttonglow"  style="skin_base" crop="64|384|64|64" align="center" x="0" y="1" scale="1.0" alpha="0.0" visible="false" enabled="false" />
		<layer name="skin_thumbborder" type="container" x="0" y="0" width.normal="80" height.normal="80" width.mobile="60" height.mobile="60" visible="false" enabled="false" align="lefttop" bgborder="2 0xE7C321 1.0" bgroundedge="5" /> <!--缩略图边框修改-->
		<layer name="skin_thumbborder" type="container" x="0" y="0" width.normal="120" height.normal="80" width.mobile="120" height.mobile="80" visible="false" enabled="false" align="lefttop" bgborder="2 0xE7C321 1.0" bgroundedge="5" />  
	</layer>

	
	<!-- gyro plugin -->
	<plugin name="skin_gyro" keep="true" url="" html5_url="%SWFPATH%/plugins/gyro2.js" devices="html5" enabled="false" onavailable="skin_arrange_buttons();" />



	<!-- skin events -->

	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
	        onnewpano="skin_showloading(true); skin_update_scene_infos(); skin_deeplinking_update_url();"
	        onremovepano="skin_showloading(true);"
	        onloadcomplete="skin_showloading(false);"
	        onidle="skin_deeplinking_update_url();"
	        onresize="skin_onresize();"
	        onenterfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	        onexitfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	        onkeydown="skin_keydown_event();"
	        />


	<!-- skin actions -->

	<action name="skin_startup">

		<!-- apply skin settings on startup -->

		if(skin_settings.thumbs,
			if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
			if(skin_settings.thumbs_onhoverscrolling AND device.mouse,
				set(layer[skin_thumbs].draggable, false);
				set(layer[skin_thumbs].onhover_autoscrolling, true);
			  );
		  );

		if(skin_settings.gyro AND !device.desktop AND device.html5,
			copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);
		  );

		if(skin_settings.maps == true,
			set(layer[skin_btn_map].visible, true);

			if(device.flash,
				copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
				set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.swf');
			  ,
				if(skin_settings.maps_type == 'bing',
					copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
					set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.js');
				  ,
					set(layer[skin_map].url, '%SWFPATH%/plugins/googlemaps.js');
				  );
			  );
		  );

		if(skin_settings.littleplanetintro AND (device.webgl OR device.flash),
			skin_setup_littleplanetintro();
		  );

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		set(layer[skin_layer].visible, true);
	</action>


	<action name="skin_addthumbs">
		if(skin_settings.thumbs == false, 
			set(layer[skin_btn_thumbs].visible,false);
		  ,
			copy(thumbwidth, skin_settings.thumbs_width);
			copy(thumbheight, skin_settings.thumbs_height);
			copy(thumbpadding, skin_settings.thumbs_padding);
			copy(thumbcrop, skin_settings.thumbs_crop);
	
	
			add(thumbxoffset, thumbwidth, thumbpadding);
			mul(thumbxcenter, thumbxoffset, 0.5);
			mul(thumbbarwidth, thumbxoffset, scene.count);
			add(thumbbarwidth, thumbpadding);
			add(thumbbarheight, thumbpadding, thumbheight);
			add(thumbbarheight, thumbpadding);
	
			if(skin_settings.thumbs_scrollindicator,
				copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
				add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
			);
	
			copy(layer[skin_thumbs].height, thumbbarheight);
			copy(layer[skin_thumbs].width, thumbbarwidth);
	
			mul(halfheight, thumbbarheight, 0.5);
			copy(layer[skin_thumbs_scrollleft].y, halfheight);
			copy(layer[skin_thumbs_scrollright].y, halfheight);
	
			for(set(i,0), i LT scene.count, inc(i),
				txtadd(thumbname,'skin_thumb_',get(i));
				addlayer(get(thumbname));
				copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
				set(layer[get(thumbname)].keep, true);
				set(layer[get(thumbname)].parent, 'skin_thumbs');
				set(layer[get(thumbname)].align, lefttop);
				
				<!-- 自定义 -->
				set(layer[get(thumbname)].group, get(scene[get(i)].group));
				
				
				copy(layer[get(thumbname)].crop, thumbcrop);
				copy(layer[get(thumbname)].width, thumbwidth);
				copy(layer[get(thumbname)].height, thumbheight);
				mul(thumbx, i, thumbxoffset);
				add(thumbx, thumbpadding);
				copy(layer[get(thumbname)].x, thumbx);
				copy(layer[get(thumbname)].y, thumbpadding);
				add(scene[get(i)].thumbx, thumbx, thumbxcenter);
				copy(scene[get(i)].thumby, thumbpadding);
				set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
				set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); );
				if(skin_settings.tooltips_thumbs,
					set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
					layer[get(thumbname)].loadstyle(skin_tooltips);
				  );
				if(skin_settings.thumbs_text,
					txtadd(thumbtext, 'skin_thumbtext_', get(i));
					addlayer(get(thumbtext));
					layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
					set(layer[get(thumbtext)].keep, true);
					set(layer[get(thumbtext)].parent, get(thumbname));
					set(layer[get(thumbtext)].html, get(scene[get(i)].title));
				  );
				 <!--START:缩略图标题-->
			<!--添加场景标题文字背景层-->
			txtadd(thumbtitlbackename,'skin_thumb_title_back',get(i));
			addlayer(get(thumbtitlbackename));
			copy(layer[get(thumbtitlbackename)].parent, thumbname);
			copy(layer[get(thumbtitlbackename)].width, thumbwidth);
			set(layer[get(thumbtitlbackename)].height, 20);
			copy(layer[get(thumbtitlbackename)].x, 0);
			copy(layer[get(thumbtitlbackename)].y, 30);
			set(layer[get(thumbtitlbackename)].align, "bottom");
			set(layer[get(thumbtitlbackename)].keep, true);
			set(layer[get(thumbtitlbackename)].type, "container");
			set(layer[get(thumbtitlbackename)].bgcolor, "0x000000");
			set(layer[get(thumbtitlbackename)].zorder, 50);
			set(layer[get(thumbtitlbackename)].bgalpha, "0.3");
<!--添加标题文字层-->
	
				  
			   );
		  );
		  
	</action>


	<action name="skin_addmapspots">
		for(set(i,0), i LT scene.count, inc(i),
			if(scene[get(i)].lat,
				txtadd(spotname, 'spot', get(i));
				txtadd(spotclickevent, 'skin_hidetooltips(); activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
				copy(scene[get(i)].mapspotname, spotname);
				addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), null);
				if(skin_settings.tooltips_mapspots,
					set(layer[skin_map].spot[get(spotname)].tooltip, get(scene[get(i)].title) );
					txtadd(layer[skin_map].spot[get(spotname)].onover, 'set(hovering,true);',  get(style[skin_tooltips].onover) );
					txtadd(layer[skin_map].spot[get(spotname)].onout,  'set(hovering,false);', get(style[skin_tooltips].onout)  );
				  );
			  );
		  );

		if(xml.scene != null,
			activatespot( get(scene[get(xml.scene)].mapspotname) );
		  ,
			activatespot(spot0);
		  );

		<!-- zoom and pan the map to see all spots at the same time -->
		zoomToSpotsExtent();
	</action>


	<action name="skin_setup_littleplanetintro">
	copy(lp_scene, xml.scene);
	copy(lp_hlookat, view.hlookat);
	copy(lp_vlookat, view.vlookat);
	copy(lp_fov, view.fov);
	copy(lp_fovmax, view.fovmax);
	copy(lp_limitview, view.limitview);
	set(view.fovmax, 165);
	set(view.limitview, lookto);
	set(view.vlookatmin, 90);
	set(view.vlookatmax, 90);
	set_hotspot_visible(false);
	set(layer[text_123].visible,false);tween(layer[text_123].alpha,0);
	lookat(calc(lp_hlookat + 200), 90, 180, 1, 0, 0);
	set(events[lp_events].onloadcomplete,
	delayedcall(2.5,
	if(lp_scene === xml.scene,
	set(control.usercontrol, off);
	copy(view.limitview, lp_limitview);
	set(view.vlookatmin, null);
	set(view.vlookatmax, null);
	tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lp_hlookat + '|' + lp_vlookat + '|' + lp_fov + '|' + 0.0),
	3.0, easeOutQuad,
	set(control.usercontrol, all);
	tween(view.fovmax, get(lp_fovmax));
	);
	set(layer[text_123].visible,true);tween(layer[text_123].alpha,1,1);
	set_hotspot_visible(true);
	
	);
	);
	);
 
</action>
 
<action name="set_hotspot_visible">
	for(set(i,0),i LT hotspot.count,inc(i),
	   if(%1 == false,
	   	if(hotspot[get(i)].visible == true,
	   		set(hotspot[get(i)].mark,true);set(hotspot[get(i)].visible,%1);
	   		);
	   	,
	   	if(hotspot[get(i)].mark == true,
	   		set(hotspot[get(i)].visible,%1);
	   		);
	   	);
	  
	);
</action>



	<action name="skin_onresize" devices="normal">
		mul(mh, area.pixelheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,170; );
		if(layer[skin_map].state    == 'opened', sub(hh,area.pixelheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); add(mh,hh); add(mh,skin_settings.controlbar_overlap); sub(mh, layer[skin_scroll_layer].y_offset); copy(layer[skin_map].height, hh); );
		add(mh, layer[skin_scroll_layer].y_offset);
		
		skin_arrange_buttons();
	</action>

	<action name="skin_onresize" devices="mobile">
		mul(mh, area.pixelheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,130; );
		if(layer[skin_map].state    == 'opened', sub(hh,area.pixelheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); add(mh,hh); add(mh,skin_settings.controlbar_overlap); sub(mh, layer[skin_scroll_layer].y_offset); copy(layer[skin_map].height, hh); );
		add(mh, layer[skin_scroll_layer].y_offset);
		
		skin_arrange_buttons();
	</action>


	<action name="skin_arrange_buttons">
		<!-- determine the visibility of the buttons and calculate their positions -->

		calc(show_selbuttons, scene.count GT 1);
		calc(show_thumbutton, skin_settings.thumbs == true);
		calc(show_mapbutton,  skin_settings.maps == true);
		calc(show_gyrobutton, plugin[skin_gyro].available == true AND view.vlookatrange == 180 );
		calc(show_vrbutton,   webvr.isavailable == true);
		calc(show_fsbutton,   device.fullscreensupport == true);

		set(lpos,6);
		set(cpos,0);
		if(show_gyrobutton, dec(cpos,20));
		if(show_vrbutton, dec(cpos,24));
		set(rpos,6);

		calc(show_dirbuttons, !device.mobile AND ((area.pixelwidth + 2*cpos) GT 520));

		copy(layer[skin_btn_navi].visible,  show_dirbuttons);

		copy(layer[skin_btn_prev].visible, show_selbuttons);
		copy(layer[skin_btn_next].visible, show_selbuttons);
		if(show_selbuttons, inc(lpos,44); inc(rpos,44); );

		copy(layer[skin_btn_thumbs].visible, show_thumbutton);
		copy(layer[skin_btn_thumbs].x, lpos);
		if(show_thumbutton, inc(lpos,40));

		copy(layer[skin_btn_map].visible, show_mapbutton);
		copy(layer[skin_btn_map].x, lpos);
		if(show_mapbutton, inc(lpos,40));

		if(show_dirbuttons,
			copy(layer[skin_btn_navi].x, cpos);
			inc(cpos,140);

			set(layer[skin_btn_gyro].align, center);
			copy(layer[skin_btn_gyro].visible, show_gyrobutton);
			copy(layer[skin_btn_gyro].x, cpos);
			if(show_gyrobutton, inc(cpos,48));

			set(layer[skin_btn_vr].align, center);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, cpos);
			if(show_vrbutton, inc(cpos,80));
		  ,
			set(layer[skin_btn_gyro].align, left);
			copy(layer[skin_btn_gyro].visible, show_gyrobutton);
			copy(layer[skin_btn_gyro].x, lpos);
			if(show_gyrobutton, inc(lpos,40));

			set(layer[skin_btn_vr].align, left);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, lpos);
			if(show_vrbutton, inc(lpos,80));
		  );

		copy(layer[skin_btn_hide].x, rpos);
		inc(rpos,40);

		copy(layer[skin_btn_fs].visible, show_fsbutton);
		copy(layer[skin_btn_fs].x, rpos);
		if(show_fsbutton, inc(rpos,40));
	</action>


	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		  );
	</action>


	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);

		if(skin_settings.thumbs_scrollbuttons,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		  );

		if(skin_settings.thumbs_scrollindicator,
			if(woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>


	<action name="skin_update_scene_infos">
		if(xml.scene !== null,
			if(scene[get(xml.scene)].index GE 0,
				if(skin_settings.title,
					if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); 
					set(layer[text_123].html,get(scene[get(xml.scene)].title));
					
					, copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
					delayedcall(0.1, set(layer[skin_title].visible,true) );
				  );

				if(skin_settings.thumbs_loop == false,
					if(scene[get(xml.scene)].index GT 0,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
					  );

					sub(lastsceneindex, scene.count, 1);
					if(scene[get(xml.scene)].index LT lastsceneindex,
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  ,
					if(scene.count GT 1,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  );

				txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));
				if(layer[get(parentname)],
					set(layer[skin_thumbborder].parent, get(parentname));
					set(layer[skin_thumbborder].visible, true);
				  ,
					set(layer[skin_thumbborder].visible, false);
				  );

				if(scene[get(xml.scene)].mapspotname,
					layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
					layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
				  );
				
				if(plugin[skin_gyro].available == true AND view.vlookatrange == 180, 
					set(layer[skin_btn_gyro].visible, true);
				  , 
					set(layer[skin_btn_gyro].visible, false) 
				);
			  );
		  );
	</action>


	<action name="skin_gotoscene">
		if(scene[%1],
			copy(cursceneindex, scene[get(xml.scene)].index);
			copy(newsceneindex, scene[%1].index);
			txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
			layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
			loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(newsceneindex LT cursceneindex ? skin_settings.loadscene_blend_prev : (newsceneindex GT cursceneindex ? skin_settings.loadscene_blend_next : skin_settings.loadscene_blend)));
		  );
	</action>
	

	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0 AND newsceneindex LT scene.count,
			txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
			layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
			loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
		  );
	</action>


	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
	</action>


	<action name="skin_showloading">
		if(display.stereo == true,
			set(layer[skin_loadingtext].visible, false);
		  ,
			set(layer[skin_loadingtext].visible, %1);
		  );
	</action>


	<action name="skin_hidetooltips">
		set(layer[skin_tooltip].alpha,0.0);
		set(layer[skin_tooltip].visible,false);
	</action>


	<action name="skin_buttonglow">
		if('%1' !== 'null',
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default,
				set(layer[skin_buttonglow].parent, null);
				set(layer[skin_buttonglow].visible, false);
			  );
		  );
	</action>


	<action name="skin_calc_opened_closed">
		set(layer[get(name)].y_opened, get(layer[get(name)].y));
		set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset - skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));
	</action>


	<action name="skin_hideskin">
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );

		set(hidetime, calc('%1' == 'instant' ? 0.0 : 0.5));
		tween(layer[skin_scroll_window].y,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_closed), get(hidetime));
		tween(layer[skin_control_bar].y,     get(layer[skin_control_bar    ].y_closed), get(hidetime));

		tween(layer[skin_btn_prev_fs].x, 0, get(hidetime));
		tween(layer[skin_btn_next_fs].x, 0, get(hidetime));

		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, true);
		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );
	</action>


	<action name="skin_showskin">
		tween(layer[skin_scroll_window  ].y, get(layer[skin_scroll_window  ].y_opened));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_opened));
		tween(layer[skin_control_bar    ].y, get(layer[skin_control_bar    ].y_opened));

		tween(layer[skin_btn_prev_fs].x, -50);
		tween(layer[skin_btn_next_fs].x, -50);

		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, false);
		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );
	</action>


	<action name="skin_showthumbs">
		<!-- 自定义开始 -->
		set(keepOpened, true);
		if(%1 == null,
			if(lastGroup != group, set(keepOpened, true););
			if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false));,
			set(show,%1);
		);		
		copy(lastGroup, group);		
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		<!-- 自定义结束 -->
		if(show,
			<!-- 自定义开始 -->
			set(g, 0);
			for(set(i,0), i LT scene.count, inc(i),
				txtadd(iThumb, 'skin_thumb_', get(i));
				if(layer[get(iThumb)].group == group,
					mul(thumbx, g, thumbxoffset);
					copy(layer[get(iThumb)].x, thumbx);
					add(scene[get(i)].thumbx, thumbx, thumbxcenter);
					inc(g);
					set(layer[get(iThumb)].visible, true);,
					set(layer[get(iThumb)].visible, false);
				);
			);
			mul(thumbbarwidth, thumbxoffset, g);
			add(thumbbarwidth, thumbpadding);
			copy(layer[skin_thumbs].width, thumbbarwidth);
			<!-- 自定义结束 -->
			<!--缩略图按钮设置（'opened' => 'closed'）-->
			set(layer[skin_thumbs].state, 'closed');
			add(mh,170);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
			<!-- 自定义 -->
			if(keepOpened, skin_showthumbs());
		  );
	</action>

	<action name="skin_showthumbs" devices="mobile">
		<!-- 自定义开始 -->
		set(keepOpened, true);
		if(%1 == null,
			if(lastGroup != group, set(keepOpened, true););
			if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false));,
			set(show,%1);
		);		
		copy(lastGroup, group);		
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		<!-- 自定义结束 -->
		if(show,
			<!-- 自定义开始 -->
			set(g, 0);
			for(set(i,0), i LT scene.count, inc(i),
				txtadd(iThumb, 'skin_thumb_', get(i));
				if(layer[get(iThumb)].group == group,
					mul(thumbx, g, thumbxoffset);
					copy(layer[get(iThumb)].x, thumbx);
					add(scene[get(i)].thumbx, thumbx, thumbxcenter);
					inc(g);
					set(layer[get(iThumb)].visible, true);,
					set(layer[get(iThumb)].visible, false);
				);
			);
			mul(thumbbarwidth, thumbxoffset, g);
			add(thumbbarwidth, thumbpadding);
			copy(layer[skin_thumbs].width, thumbbarwidth);
			<!-- 自定义结束 -->
			<!--缩略图按钮设置（'opened' => 'closed'）-->
			set(layer[skin_thumbs].state, 'closed');
			add(mh,130);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
			<!-- 自定义 -->
			if(keepOpened, skin_showthumbs());
		  );
	</action>


	<action name="skin_showmap">
		if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(show,
			tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
			set(layer[skin_map].visible, true);
			tween(layer[skin_map].alpha, 1.0, 0.25);
			set(layer[skin_map].state, 'opened');
			sub(hh,area.pixelheight,skin_settings.controlbar_offset);
			sub(hh,layer[skin_control_bar].height);
			sub(hh,32);
			add(mh,hh);
			sub(hh,skin_settings.controlbar_overlap);
			copy(layer[skin_map].height, hh);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
		  ,
		  	if(layer[skin_map].state != 'closed',
				set(layer[skin_map].state, 'closed');
				add(mh, layer[skin_scroll_layer].y_offset);
				tween(layer[skin_map].alpha, 0.0, 0.5, easeOutQuint);
				tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
			  );
		  );
	</action>


	<action name="skin_keydown_event">
		if(keycode == 33, skin_nextscene_loop(-1) );               <!-- Page Up   - previous scene -->
		if(keycode == 34, skin_nextscene_loop(+1) );               <!-- Page Dowm - next scene -->
		if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );   <!-- End       - last scene -->
		if(keycode == 36, skin_gotoscene(0) );                     <!-- Home/Pos1 - first scene -->
	</action>
	

	<action name="skin_deeplinking_update_url">
		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false),
			copy(adr, browser.location);
			indexoftxt(qi, get(adr), '?');
			if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
			copy(si, scene[get(xml.scene)].index);
			copy(h, view.hlookat);
			copy(v, view.vlookat);
			copy(f, view.fov);
			copy(d, view.distortion);
			copy(a, view.architectural);
			clamp(d, 0.0, 1.0);
			clamp(a, 0.0, 1.0);
			set(pp, calc(f LT 10 ? 6 : 2));
			roundval(h, get(pp));
			roundval(v, get(pp));
			roundval(f, get(pp));
			roundval(d, 2);
			roundval(a, 1);
			set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
			js( history.replaceState(null, document.title, get(adr)); );
		  );
	</action>


	<!-- context menu -->
	<contextmenu>
		<item name="kr" caption="KRPANO"     />
		<item name="fs" caption="FULLSCREEN" />
		<item name="cc" caption="Change Controlmode" onclick="skin_changecontrolmode();"  separator="true" />
		<item name="nv" caption="Normal View"        onclick="skin_view_normal();"        showif="view.vlookatrange == 180" separator="true"      />
		<item name="fv" caption="Fisheye View"       onclick="skin_view_fisheye();"       showif="view.vlookatrange == 180" devices="flash|webgl" />
		<item name="sv" caption="Stereographic View" onclick="skin_view_stereographic();" showif="view.vlookatrange == 180" devices="flash|webgl" />
		<item name="av" caption="Architectural View" onclick="skin_view_architectural();" showif="view.vlookatrange == 180"                       />
		<item name="pv" caption="Pannini View"       onclick="skin_view_pannini();"       showif="view.vlookatrange == 180" devices="flash|webgl" />
		<item name="lp" caption="Little Planet View" onclick="skin_view_littleplanet();"  showif="view.vlookatrange == 180" devices="flash|webgl" />
	</contextmenu>


	<action name="skin_changecontrolmode">
		switch(control.mousetype, moveto, drag2d);
		switch(control.touchtype, moveto, drag2d);
	</action>

	<action name="skin_view_look_straight">
		if(view.vlookat LT -80 OR view.vlookat GT +80,
			tween(view.vlookat, 0.0, 1.0, easeInOutSine);
			tween(view.fov,     100, distance(150,0.8));
		  );
	</action>

	<action name="skin_view_normal">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    0.0, distance(1.0,0.5));
	</action>

	<action name="skin_view_fisheye">
		skin_view_look_straight();
		tween(view.architectural, 0.0,  distance(1.0,0.5));
		tween(view.pannini,       0.0,  distance(1.0,0.5));
		tween(view.distortion,    0.35, distance(1.0,0.5));
	</action>

	<action name="skin_view_architectural">
		skin_view_look_straight();
		tween(view.architectural, 1.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    0.0, distance(1.0,0.5));
	</action>

	<action name="skin_view_stereographic">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    1.0, distance(1.0,0.8));
	</action>

	<action name="skin_view_pannini">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       1.0, distance(1.0,0.8));
		if(view.distortion LT 0.1,
			tween(view.distortion, 1.0, distance(1.0,0.8));
		  );
	</action>

	<action name="skin_view_littleplanet">
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    1.0, distance(1.0,0.8));
		tween(view.fov,           150, distance(150,0.8));
		tween(view.vlookat,        90, distance(100,0.8));
		add(new_hlookat, view.hlookat, 123.0);
		tween(view.hlookat, get(new_hlookat), distance(100,0.8));
	</action>

</krpano>
